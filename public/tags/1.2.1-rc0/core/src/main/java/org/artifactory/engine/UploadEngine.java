/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.artifactory.engine;

import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
import org.artifactory.maven.Maven;
import org.artifactory.repo.CentralConfig;
import org.artifactory.repo.LocalRepo;
import org.artifactory.repo.RepoBase;
import org.artifactory.request.ArtifactoryRequest;
import org.artifactory.request.ArtifactoryResponse;
import org.artifactory.resource.ArtifactResource;
import org.artifactory.security.RepoPath;
import org.artifactory.security.SecurityHelper;
import org.artifactory.spring.ArtifactoryContext;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class UploadEngine {
    private static final Logger LOGGER = Logger.getLogger(UploadEngine.class);

    private final ArtifactoryContext context;

    public UploadEngine(ArtifactoryContext context) {
        this.context = context;
    }

    public void process(ArtifactoryRequest request, ArtifactoryResponse response)
            throws IOException, ArtifactDeploymentException {
        LOGGER.debug("Request: source=" + request.getSourceDescription()
                + ", path=" + request.getPath() + ", lastModified=" + request.getLastModified()
                + ", ifModifiedSince=" + request.getIfModifiedSince());
        //Get the proper file repository for deployment from the path
        String repoKey = request.getTargetRepoGroup();
        //Sanity check
        if (repoKey == null) {
            response.sendError(HttpStatus.SC_BAD_REQUEST);
            LOGGER.error("No target local repository specified in deploy request.");
            return;
        }
        CentralConfig cc = context.getCentralConfig();
        LocalRepo repo = cc.localOrCachedRepositoryByKey(repoKey);
        if (repo == null) {
            throw new RuntimeException("Could not find a local repository named " + repoKey +
                    " to deploy to.");
        }
        if (repo.isBlackedOut()) {
            response.sendError(HttpStatus.SC_FORBIDDEN);
            LOGGER.warn("Uplod rejected: '" + repoKey + "' is blacked out.");
            return;
        }
        String path = request.getPath();
        if (!repo.accept(path)) {
            response.sendError(HttpStatus.SC_FORBIDDEN);
            LOGGER.warn("Uplod rejected by '" + repoKey + "' include/exclude patterns.");
            return;
        }
        ArtifactResource ar = new ArtifactResource(path, repo);
        //The default wagon sends put requests for each md5 sha1 files etc. which are already
        //generated by the deployer
        if (ar.isValid()) {
            //Create a temp file for deployment
            String fileName = path.substring(path.lastIndexOf("/") + 1);
            File file = new File(RepoBase.TEMP_FOLDER, fileName);
            try {
                FileOutputStream output = new FileOutputStream(file);
                try {
                    IOUtils.copy(request.getInputStream(), output);
                } finally {
                    IOUtils.closeQuietly(output);
                }
                ar.setLastModifiedTime(file.lastModified());
                ar.setSize(file.length());
                Maven maven = context.getMaven();
                Artifact artifact = maven.createArtifact(ar);
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug("Deploying '" + fileName + "' as '" + artifact + "'.");
                }
                SecurityHelper security = context.getSecurity();
                RepoPath repoPath = new RepoPath(repo.getKey(), ar.getPath());
                if (!security.canDeploy(repoPath)) {
                    response.sendError(HttpStatus.SC_FORBIDDEN);
                    return;
                }
                maven.deploy(file, artifact, repo);
            } finally {
                file.delete();
            }
        }
        //Send ok. Also for those artifacts that the wagon sent and we ignore (md5's etc.)
        response.sendOk();
    }
}
